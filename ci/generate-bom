#!/usr/bin/env bash

# pcb-main-nautilus-atmega4809
#
# Copyright 2022-2023, Andrew Countryman <apcountryman@gmail.com> and the
# pcb-main-nautilus-atmega4809 contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Description: pcb-main-nautilus-atmega4809 repository CI BOM generation script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Generate project BOM."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --bom-type <bom-type>"
    echo "OPTIONS"
    echo "    --bom-type <bom-type>"
    echo "        Specify the type of BOM to generate. The following BOM types are"
    echo "        supported:"
    echo "            interactive"
    echo "            traditional"
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --bom-type interactive"
    echo "    $mnemonic --bom-type traditional"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function populate_version()
{
    local files; mapfile -t files < <( git -C "$repository" grep --files-with-matches 'GIT_VERSION' -- ':!:ci/' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly files

    for file in "${files[@]}"; do
        if ! sed -i -e "s/GIT_VERSION/$version/g" "$file"; then
            abort
        fi
    done
}

function generate_bom_interactive()
{
    local projects; mapfile -t projects < <( git -C "$repository" ls-files '*.kicad_pro' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly projects

    if [[ "${#projects[@]}" -gt 1 ]]; then
        abort "multiple projects found: ${projects[*]}"
    fi

    if [[ "${#projects[@]}" -eq 1 ]]; then
        local -r project="${projects[0]}"
        local -r project_name=$( basename -s .kicad_pro "$project" )
        local -r layout="$repository/$project_name.kicad_pcb"

        if git -C "$repository" ls-files --error-unmatch "$layout"; then
            if ! "$repository/utilities/InteractiveHtmlBom/InteractiveHtmlBom/generate_interactive_bom.py" --no-browser --dest-dir "$repository" --name-format "$project_name-bom-interactive" --include-tracks --include-nets "$layout"; then
                abort
            fi
        fi
    fi
}

function generate_bom_traditional()
{
    local projects; mapfile -t projects < <( git -C "$repository" ls-files '*.kicad_pro' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly projects

    if [[ "${#projects[@]}" -gt 1 ]]; then
        abort "multiple projects found: ${projects[*]}"
    fi

    if [[ "${#projects[@]}" -eq 1 ]]; then
        local -r project="${projects[0]}"
        local -r project_name=$( basename -s .kicad_pro "$project" )
        local -r schematic="$repository/$project_name.kicad_sch"
        local -r kibom_configuration_file="$repository/kibom.ini"

        if git -C "$repository" ls-files --error-unmatch "$schematic"; then
            # KiAuto documentation refers to the following file as "the project's XML
            # BoM", but it will be used as KiBoM's "netlist" positional argument
            local -r netlist="$repository/$project_name.xml"

            if ! "$repository/utilities/KiAuto/src/eeschema_do" bom_xml "$schematic" "$repository/temp"; then
                abort
            fi

            if ! rm -rf "$repository/$project_name-bom-traditional/"; then
                abort
            fi

            local -r formats=( "csv" "html" "tsv" "txt" "xlsx" "xml" )

            for format in "${formats[@]}"; do
                if ! "$repository/utilities/KiBoM/KiBOM_CLI.py" --cfg "$kibom_configuration_file" -d "$repository/$project_name-bom-traditional" "$netlist" "$project_name-bom-traditional.$format"; then
                    abort
                fi
            done
        fi
    fi
}

function generate_bom()
{
    "generate_bom_$bom_type"
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --bom-type)
                if [[ -n "$bom_type" ]]; then
                    abort "BOM type already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "BOM type not specified"
                fi

                local -r bom_type="$1"; shift

                if [[ "$bom_type" != "traditional" && "$bom_type" != "interactive" ]]; then
                    abort "'$bom_type' is not a supported BOM type"
                fi
                ;;
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -z "$bom_type" ]]; then
        abort "'--bom-type' must be specified"
    fi

    populate_version
    generate_bom
}

main "$@"

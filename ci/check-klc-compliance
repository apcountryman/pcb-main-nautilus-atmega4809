#!/usr/bin/env bash

# pcb-main-nautilus-atmega4809
#
# Copyright 2022-2023, Andrew Countryman <apcountryman@gmail.com> and the
# pcb-main-nautilus-atmega4809 contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Description: pcb-main-nautilus-atmega4809 repository CI KLC compliance check script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Check if project specific libraries comply with the KLC."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --library-type <library-type>"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --library-type <library-type>"
    echo "        Specify the type of library to check. The following library types are"
    echo "        supported:"
    echo "            footprint"
    echo "            symbol"
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --library-type footprint"
    echo "    $mnemonic --library-type symbol"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function check_footprint()
{
    local footprints; mapfile -t footprints < <( git -C "$repository" ls-files '*.kicad_mod' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly footprints

    if [[ "${#footprints[@]}" -ne 0 ]]; then
        if ! "$repository/utilities/kicad-library-utils/klc-check/check_footprint.py" -s -vv "${footprints[@]}"; then
            abort
        fi
    fi
}

function check_symbol()
{
    local symbols; mapfile -t symbols < <( git -C "$repository" ls-files '*.kicad_sym' | xargs -r -d '\n' -I '{}' find "$repository/{}" ); readonly symbols

    if [[ "${#symbols[@]}" -ne 0 ]]; then
        if ! "$repository/utilities/kicad-library-utils/klc-check/check_symbol.py" -s -vv "${symbols[@]}"; then
            abort
        fi
    fi
}

function check_klc_compliance()
{
    "check_$library_type"
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r repository=$( readlink -f "$( dirname "$script" )/.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --library-type)
                if [[ -n "$library_type" ]]; then
                    abort "library type already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "library type not specified"
                fi

                local -r library_type="$1"; shift

                if [[ "$library_type" != "footprint" && "$library_type" != "symbol" ]]; then
                    abort "'$library_type' is not a supported library type"
                fi
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if [[ -z "$library_type" ]]; then
        abort "'--library-type' must be specified"
    fi

    check_klc_compliance
}

main "$@"
